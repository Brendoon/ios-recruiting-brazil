//
//  MoviesInteractor.swift
//  Movs
//
//  Created by Brendoon Ryos on 24/01/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesBusinessLogic {
  func fetchMovies(request: Movies.Popular.Request)
  func fetchLocalMovies()
  func fetchGenres(request: Movies.Details.Request)
}

protocol MoviesDataStore {
  var movies: [Movie] { get set }
  var genres: [Genre] { get set }
  var selectedMovie: Movie? { get set }
  var selectedGenres: [Genre] { get set }
  var currentPage: Int { get set }
  var totalPages: Int { get set }
  var totalResults: Int { get set }
}

class MoviesInteractor: MoviesBusinessLogic, MoviesDataStore {
  var presenter: MoviesPresentationLogic?
  var worker: MoviesWorker?
  
  // MARK: Movies Data Store
  var movies: [Movie] = []
  var genres: [Genre] = []
  var selectedMovie: Movie? = .none
  var selectedGenres: [Genre] = []
  var totalPages: Int = 0
  var currentPage: Int = 0
  var totalResults: Int = 0
  
  var isFetchInProgress = false
  
  // MARK: Fetch Movies
  func fetchMovies(request: Movies.Popular.Request) {
    guard !isFetchInProgress else { return }
    isFetchInProgress = true
    
    if request.query != .none {
      searchForMovie(request: request)
    } else {
      currentPage += 1
      guard totalPages > currentPage || totalPages == 0 else { return }
      let newRequest = Movies.Popular.Request(query: .none, page: currentPage)

      worker = MoviesWorker()
      worker?.fetchMovies(request: newRequest, completion: { result in
        switch result {
        case .success(let data):
          self.movies.mergeElements(newElements: data.results)
          self.totalPages = data.totalPages
          self.totalResults = data.totalResults
          let response = Movies.Popular.Response(data: data)
          self.presenter?.presentMovies(response: response)
        case .error(let error):
          let response = Movies.Popular.Response(error: error)
          self.presenter?.presentErrorMessage(response: response)
        }
        DispatchQueue.main.async { self.isFetchInProgress = false }
      })
    }
  }
  
  // MARK: Fetch Movies
  func fetchGenres(request: Movies.Details.Request) {
    if request.movie == .none {
      worker = MoviesWorker()
      worker?.fetchGenres(completion: { result in
        switch result {
        case .success(let data):
          self.genres = data.genres
        case .error:
          break
        }
      })
    } else {
      var genres: [Genre] = []
      let movie = request.movie!
      for genre in self.genres where movie.genreIds.contains(genre.id){
        genres.append(genre)
      }
      self.selectedGenres = genres
      self.selectedMovie = movie
      let response = Movies.Details.Response(movie: movie, genres: genres)
      presenter?.presentMovieDetails(response: response)
    }
  }
  
  // MARK: Search for a movie
  private func searchForMovie(request: Movies.Popular.Request) {
    let query = request.query!.lowercased()
    let filteredMovies = self.movies.filter {
      $0.title.lowercased().contains(query) || $0.originalTitle.lowercased().contains(query)
    }
    
    if filteredMovies.count == 0 {
      let response = Movies.Popular.Response(data: .none, error: .search(query: request.query!))
      presenter?.presentErrorMessage(response: response)
    } else {
      let moviesData = MoviesData(page: 1, totalResults: filteredMovies.count, totalPages: 1, results: filteredMovies)
      let response = Movies.Popular.Response(data: moviesData, error: .none)
      presenter?.presentMovies(response: response)
    }
    
    isFetchInProgress = false
  }
  
  // MARK: Fetch local movies
  func fetchLocalMovies() {
    let data = MoviesData(page: 1, totalResults: movies.count, totalPages: totalPages, results: movies)
    let response = Movies.Popular.Response(data: data, error: .none)
    presenter?.presentMovies(response: response)
  }
  
}
