//
//  MoviesViewController.swift
//  Movs
//
//  Created by Brendoon Ryos on 24/01/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum SearchingState {
  case begin
  case ended
  case none
}

protocol MoviesDisplayLogic: class {
  func displayMovies(viewModel: Movies.Popular.ViewModel)
  func displayErrorMessage(viewModel: Movies.Popular.ViewModel)
  func displayMovieDetails(viewModel: Movies.Details.ViewModel)
}

class MoviesViewController: UIViewController {
  var interactor: MoviesBusinessLogic?
  var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)?
  
  let moviesView = MoviesView()
  var searchingState: SearchingState = .none
  var currentCount = 0

  // MARK: Object lifecycle
  init() {
    super.init(nibName: nil, bundle: nil)
    self.title = "Movies"
    self.tabBarItem = UITabBarItem(title: self.title, image: UIImage(named: self.title!.lowercased()), tag: 0)
    self.modalTransitionStyle = .coverVertical
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = MoviesInteractor()
    let presenter = MoviesPresenter()
    let router = MoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    configCollection()
    setupSearchBar()
    fetchGenres()
    fetchMovies()
  }
  
  override func loadView() {
    self.view = moviesView
  }
  
  func configCollection() {
    moviesView.collectionView.prefetchDataSource = self
    moviesView.collectionView.setSelectionHandler(fetchGenres)
  }
  
  // MARK: Fetch Movies
  func fetchMovies(_ query: String? = .none) {
    if currentCount == 0 {
      moviesView.middleactivityIndicator.startAnimating()
    }
    let request = Movies.Popular.Request(query: query)
    interactor?.fetchMovies(request: request)
  }
  
  // MARK: Fetch all Genres
  func fetchGenres() {
    let request = Movies.Details.Request()
    interactor?.fetchGenres(request: request)
  }
  
  // MARK: Fetch Genres for a given movie
  func fetchGenres(for movie: Movie) {
    let request = Movies.Details.Request(movie: movie)
    interactor?.fetchGenres(request: request)
  }
}

extension MoviesViewController: MoviesDisplayLogic {
  func displayMovies(viewModel: Movies.Popular.ViewModel) {
    self.moviesView.errorView.setup(with: .none)
    self.moviesView.collectionView.updateItems(viewModel.results, searchingState: self.searchingState)
    self.moviesView.middleactivityIndicator.stopAnimating()
    if self.searchingState == .none { self.currentCount += viewModel.currentCount }
    if self.searchingState == .ended { self.searchingState = .none }
  }
  
  func displayErrorMessage(viewModel: Movies.Popular.ViewModel) {
    self.moviesView.collectionView.updateItems(viewModel.results, searchingState: self.searchingState)
    self.moviesView.errorView.setup(with: viewModel.error)
    self.moviesView.middleactivityIndicator.stopAnimating()
  }
  
  func displayMovieDetails(viewModel: Movies.Details.ViewModel) {
    self.router?.routeToMovieDetails()
    
    let movie = viewModel.movie
    print(movie.title)
    print(movie.originalTitle)
  }
}

// MARK: - UICollectionViewDataSourcePrefetching
extension MoviesViewController: UICollectionViewDataSourcePrefetching {
  func isLoadingCell(for tag: Int) -> Bool {
    print(tag + 3, currentCount - 1)
    return tag + 3 >= currentCount - 1
  }

  func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
    guard let tag = collectionView.visibleCells.last?.tag else { return }
    if isLoadingCell(for: tag) {
      if searchingState != .begin {
        fetchMovies()
      }
    }
  }
}

// MARK: - UISearchBarDelegate
extension MoviesViewController: UISearchBarDelegate {
  
  func setupSearchBar(){
    self.definesPresentationContext = true
    let searchController = UISearchController(searchResultsController: nil)
    searchController.definesPresentationContext = true
    searchController.searchBar.delegate = self
    searchController.searchBar.tintColor = ColorPalette.black
    searchController.dimsBackgroundDuringPresentation = false
    searchController.obscuresBackgroundDuringPresentation = false
    self.navigationItem.searchController = searchController
  }
  
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    searchingState = .begin
    if !searchText.isEmpty {
      fetchMovies(searchText)
    }
  }
  
  func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
    searchingState = .ended
    interactor?.fetchLocalMovies()
  }
}
