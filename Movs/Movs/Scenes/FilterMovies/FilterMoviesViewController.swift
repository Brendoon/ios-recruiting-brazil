//
//  FilterMoviesViewController.swift
//  Movs
//
//  Created by Brendoon Ryos on 06/02/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FilterMoviesDisplayLogic: class {
  func displayFilterValues(viewModel: FilterMovies.ViewModel)
}

class FilterMoviesViewController: UIViewController {
  var interactor: FilterMoviesBusinessLogic?
  var router: (NSObjectProtocol & FilterMoviesRoutingLogic & FilterMoviesDataPassing)?
  
  let filterMoviesView = FilterMoviesView()
  var applyFilter: ((String, String) -> ())? = .none
  var date: String! = "None"
  var genre: String! = "None"

  // MARK: Object lifecycle
  init() {
    super.init(nibName: nil, bundle: nil)
    self.title = "Filter"
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = FilterMoviesInteractor()
    let presenter = FilterMoviesPresenter()
    let router = FilterMoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setupView()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    fetchFilterValues()
  }
  
  override func loadView() {
    self.view = filterMoviesView
  }
  
  func setupView() {
    filterMoviesView.applyButton.addTarget(self, action: #selector(applyButtonPressed), for: .touchUpInside)
    filterMoviesView.tableView.setFilterHandler(filterHandler)
  }
  
  // MARK: Fetch Filter Values
  func fetchFilterValues() {
    let request = FilterMovies.Request()
    interactor?.fetchFilterValues(request: request)
  }
  
  func filterHandler(_ date: String,_ genre: String) {
    self.date = date
    self.genre = genre
    
    if date == "None" && genre == "None" {
      filterMoviesView.applyButton.backgroundColor = .gray
    } else {
      filterMoviesView.applyButton.backgroundColor = ColorPalette.yellow
    }
  }
  
  @objc func applyButtonPressed(_ sender: UIButton) {
    if !(date == "None" && genre == "None") {
      applyFilter?(date, genre)
    }
    self.navigationController?.popViewController(animated: true)
  }
}

extension FilterMoviesViewController: FilterMoviesDisplayLogic {
  func displayFilterValues(viewModel: FilterMovies.ViewModel) {
    filterMoviesView.tableView.update(genres: viewModel.genres, dates: viewModel.dates)
  }
}
