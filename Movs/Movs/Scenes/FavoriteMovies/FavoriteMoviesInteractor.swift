//
//  FavoriteMoviesInteractor.swift
//  Movs
//
//  Created by Brendoon Ryos on 03/02/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteMoviesBusinessLogic {
  func fetchFavoriteMovies(request: FavoriteMovies.Show.Request)
  func fetchLocalMovies(request: FavoriteMovies.Show.Request)
  func unfavoriteMovie(request: FavoriteMovies.Delete.Request)
  func applyFilter(request: FavoriteMovies.Filter.Request)
}

protocol FavoriteMoviesDataStore {
  var movies: [CDMovie] { get set }
  var filteredMovies: [CDMovie] { get set }
  var dates: [String] { get set }
  var genres: [String] { get set }
}

class FavoriteMoviesInteractor: FavoriteMoviesBusinessLogic, FavoriteMoviesDataStore {
  var presenter: FavoriteMoviesPresentationLogic?
  var worker: FavoriteMoviesWorker?
  
  var movies: [CDMovie] = [] {
    didSet {
      movies.forEach {
        genres.mergeElements(newElements: $0.genres ?? [])
        if let dateComponets = $0.releaseDate?.components(separatedBy: "-") {
          if !dates.contains(dateComponets.first!) {
            dates.append(dateComponets.first!)
          }
        }
      }
    }
  }
  
  var filteredMovies: [CDMovie] = []
  
  var dates: [String] = []
  var genres: [String] = []
  
  
  // MARK: Fetch Favorite Movies
  func fetchFavoriteMovies(request: FavoriteMovies.Show.Request) {
    if request.query == .none && !request.isFiltering {
      worker = FavoriteMoviesWorker()
      worker?.fetchFavoriteMovies(completion: { movies in
        self.movies = movies
        if movies.isEmpty {
          let response = FavoriteMovies.Show.Response(error: .empty)
          self.presenter?.presentErrorMessage(response: response)
        } else {
          self.movies.mergeElements(newElements: movies)
          let response = FavoriteMovies.Show.Response(movies: movies)
          self.presenter?.presentFavoriteMovies(response: response)
        }
      })
    } else {
      searchForMovie(request: request)
    }
  }
  
  // MARK: Fetch Local Movies
  func fetchLocalMovies(request: FavoriteMovies.Show.Request) {
    if movies.isEmpty {
      let response = FavoriteMovies.Show.Response(error: .empty)
      self.presenter?.presentErrorMessage(response: response)
    } else  {
      if request.isFiltering {
        let response = FavoriteMovies.Show.Response(movies: filteredMovies)
        self.presenter?.presentFavoriteMovies(response: response)
      } else {
        let response = FavoriteMovies.Show.Response(movies: movies)
        self.presenter?.presentFavoriteMovies(response: response)
      }
    }
  }
  
  // MARK: Unfavorite Movie
  func unfavoriteMovie(request: FavoriteMovies.Delete.Request) {
    worker?.unfavoriteMovie(request: request, completion: { movies in
      self.movies = movies
      if movies.isEmpty {
        let response = FavoriteMovies.Show.Response(error: .empty)
        self.presenter?.presentErrorMessage(response: response)
      } else {
        if request.isFiltering {
          self.filteredMovies = self.filteredMovies.filter { $0.id != request.movie.id }
          let response = FavoriteMovies.Show.Response(movies: self.filteredMovies)
          self.presenter?.presentFavoriteMovies(response: response)
        } else {
          let response = FavoriteMovies.Show.Response(movies: movies)
          self.presenter?.presentFavoriteMovies(response: response)
        }
      }
    })
  }
  
  // MARK: Search for a movie
  private func searchForMovie(request: FavoriteMovies.Show.Request) {
    let query = request.query!.lowercased()
    var filteredMovies: [CDMovie] = []
    
    if request.isFiltering {
      filteredMovies = self.filteredMovies.filter {
        $0.title!.lowercased().contains(query)
      }
    } else {
      filteredMovies = self.movies.filter {
        $0.title!.lowercased().contains(query)
      }
    }
    
    if filteredMovies.isEmpty {
      let response = FavoriteMovies.Show.Response(error: .search(query: request.query!))
      presenter?.presentErrorMessage(response: response)
    } else {
      let response = FavoriteMovies.Show.Response(movies: filteredMovies)
      presenter?.presentFavoriteMovies(response: response)
    }
  }
  
  // MARK: Apply Filter
  func applyFilter(request: FavoriteMovies.Filter.Request) {
    var filteredMovies: [CDMovie] = []
    if request.date != "None" {
      if request.genre != "None" {
        filteredMovies = self.movies.filter { $0.releaseDate!.contains(request.date) && $0.genres!.contains(request.genre) }
      } else {
        filteredMovies = self.movies.filter { $0.releaseDate!.contains(request.date) }
      }
    } else {
      filteredMovies = self.movies.filter { $0.genres!.contains(request.genre) }
    }
    
    self.filteredMovies = filteredMovies
    let response = FavoriteMovies.Show.Response(movies: filteredMovies)
    presenter?.presentFavoriteMovies(response: response)
  }
}
