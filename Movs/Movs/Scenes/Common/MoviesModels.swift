//
//  MoviesModels.swift
//  Movs
//
//  Created by Brendoon Ryos on 24/01/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Movies {
  // MARK: Use cases
  enum Details {
    struct Request {
      let movie: Movie?
      
      init(movie: Movie? = .none) {
        self.movie = movie
      }
    }
    
    struct Response {
      let movie: Movie
      let genres: [Genre]
    }
    
    struct ViewModel {
      private let movie: Movie
      private let genres: [Genre]
      
      var title: String {
        return movie.title
      }
      
      var genresString: String {
        let genreTitles: [String] = genres.compactMap { $0.name }
        return genreTitles.joined(separator: ", ")
      }
      
      var backdropPath: String? {
        return movie.backdropPath
      }
      
      var year: String? {
        let dateComponets = movie.releaseDate.components(separatedBy: "-")
        return dateComponets.first
      }
      
      var overview: String {
        return movie.overview
      }
      
      init(movie: Movie, genres: [Genre]) {
        self.movie = movie
        self.genres = genres
      }
    }
  }
  
  enum Popular {
    struct Request {
      let query: String?
      let page: Int
      
      init(query: String?, page: Int = 1) {
        self.query = query
        self.page = page
      }
    }
    
    struct Response {
      let data: MoviesData?
      let error: ErrorType
      
      init(data: MoviesData? = .none, error: ErrorType = .none) {
        self.data = data
        self.error = error
      }
    }
    
    struct ViewModel {
      private let data: MoviesData?
      let error: ErrorType
      
      var currentPage: Int {
        return data?.page ?? 1
      }
      
      var totalPages: Int {
        return data?.totalPages ?? 1
      }
      
      var currentCount: Int {
        return results.count
      }
      
      var totalResults: Int {
        return data?.totalResults ?? 0
      }
      
      var results: [Movie] {
        return data?.results ?? []
      }
      
      init(data: MoviesData? = .none, error: ErrorType = .none) {
        self.data = data
        self.error = error
      }
    }
  }
}
